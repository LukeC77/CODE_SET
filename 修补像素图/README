本程序的目的是恢复损坏的 P2 PGM 图像文件，并以二进制 PGM 格式（P5）输出恢复后的图像。


架构
- 我们使用 Hanson 的 Table 作为数据的哈希表。
- 键是由从损坏行中提取的非数字字符串生成的atom。相同的非数字字符串将生成相同的atom。
- 值是一个序列。序列包含指向从损坏行中提取并分配在堆上的数字数组的指针。


数据流
- 我们的程序的数据流遵循一个结构化过程，其中输入被逐行读取、处理，然后以所需格式输出：
- 输入：程序打开一个文件并使用 readaline 读取其内容。每一行都被动态分配并单独处理。
- 数据提取：对于每一行，extract 函数分离数字序列和非数字字符，并将它们返回给
  data_processing。
- 数据存储：使用序列将数字数组的指针存储在哈希表中，以非数字字符串为键。
  在数据存储期间，将检查序列的长度，并将大小大于一的序列作为目标，与此序列对应的键将被
  存储。
- 输出：一旦所有行都被处理，将使用存储的键定位相关序列，并通过检索相关数组以 P5 
  格式输出。
- 内存管理：处理完成后，所有动态分配的内存都将被释放，以确保没有内存泄漏。


文件
- restoration.c
  此文件是程序的驱动文件。它处理命令行参数，打开输入文件，并调用 data_processing 
  来处理文件内容。

- process.h
  声明在 process.c 中使用的函数，包括文件数据处理、提取数字和非数字、管理哈希表和
  输出数据。

- process.c
  实现文件处理的核心逻辑，从每一行中提取数据，将其存储在哈希表中，并以 P5 PGM 格式生成
  输出。它还管理内存分配和清理。

- readaline.c
  定义 readaline，它一次从输入文件中读取一行，为每一行动态分配内存，并确保文件读取和
  内存分配的错误处理。





